# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12etLb3ovnUDQMtNuZhDaZJGI192TIDJM
"""

import random
import itertools as it
import json

class SakClass:
    def __init__(self):
        self.lets = {'Α': [12,1], 'Β': [1,8], 'Γ': [2,4], 'Δ': [2,4], 'Ε': [8,1],
                     'Ζ': [1,10], 'Η': [7,1], 'Θ': [1,10], 'Ι': [8,1], 'Κ': [4,2],
                     'Λ': [3,3], 'Μ': [3,3], 'Ν': [6,1], 'Ξ': [1,10], 'Ο': [9,1],
                     'Π': [4,2], 'Ρ': [5,2], 'Σ': [7,1], 'Τ': [8,1], 'Υ': [4,2],
                     'Φ': [1,8], 'Χ': [1,8], 'Ψ': [1,10], 'Ω': [3,3]}
        self.randomize_sak()

    def randomize_sak(self):
        self.sak = []
        for letter, freq in self.lets.items():
          self.sak.extend([letter] * freq[0])
        random.shuffle(self.sak)

    def getletters(self, n):
        letters = []
        letters = [self.sak.pop() for i in range(min(n, len(self.sak)))]
        return letters

    def putbackletters(self, letters):
        self.sak.extend(letters)
        random.shuffle(self.sak)

    def __repr__(self):
        return f'Class: {self.__class__},'\
               f'letters_in_dict_with_their_values: {self.lets},'\
               f'sak: {self.sak},'\
               f'Το σακουλάκι έχει {len(self.sak)} γράμματα.'

class Player:
    def __init__(self, name, score=0):
        self.name = name
        self.score = score
        self.letters = []

    def show_letters(self):
        print('Τα γράμματα που έχεις είναι: ')
        print(self.letters)

    def increase_score(self, word_points):
        self.score = self.score + word_points

    @staticmethod
    def score_decorator(function):
        def show_score(self):
            print()
            print(self.name, ",το score σου είναι:", end=' ')
            function(self)

        return show_score

    @staticmethod
    def final_score_decorator(function):
        def show_final_score(self):
            print()
            print(self.name, ': το τελικό σου score είναι:', end=' ')
            function(self)

        return show_final_score

    def __repr__(self):
        return f'Class: {self.__class__},'\
               f'name: {self.name},'\
               f'score: {self.score},'\
               f'letters: {self.letters}'

class Human(Player):
    def __init__(self, name="Human Player"):
        super().__init__(name)

    def show_letters(self):
        super().show_letters()
        print("Η αξία τους είναι:")

    def increase_score(self, word_points):
        super().increase_score(word_points)
        print('Νέο score: ', self.score)

    def play(self):
        word = input('Πληκτρολόγησε μία λέξη με κεφαλαίους ελληνικούς χαρακτήρες: ')

        while True:
          all_letters = ''.join(self.letters)

          if word == 'p' or word == 'q' or word == '':
            return word

          elif all(all_letters.count(letter) >= word.count(letter) for letter in word):

            # Εάν ο παίκτης εισαγάγει την κενή λέξη, εμφανίζεται μήνυμα λάθους
            if word == '':
                print('Δεν πληκτρολογήθηκε λέξη.')
                print('Δοκίμασε ξανά!')
                word = input('Πληκτρολόγησε μία λέξη με κεφαλαίους ελληνικούς χαρακτήρες: ')
            else:
                print('Έλεγχος αν η λέξη υπάρχει στο λεξικό...')
                break

          else:
                print('Λάθος χρήση γραμμάτων!')
                print('Δοκίμασε ξανά!')
                word = input('Πληκτρολόγησε μία λέξη με κεφαλαίους ελληνικούς χαρακτήρες: ')

        return word

    @Player.score_decorator
    def show_score(self):
        print(self.score)

    @Player.final_score_decorator
    def show_final_score(self):
        print(self.score)

    def __repr__(self):
      return f'Class: {self.__class__},'\
             f'name: {self.name},'\
             f'score: {self.score},'\
             f'letters: {self.letters}'

import itertools as it

class Computer(Player):
    def __init__(self,name="Computer Player"):
        super().__init__(name)

    def show_letters(self):
        super().show_letters()
        print("Η αξία τους είναι:")

    def increase_score(self, word_points):
        super().increase_score(word_points)
        print('Νέο score: ', self.score)

    def play_decorator(func):
          def wrapper(self, words, n):
            if n == 1:
                print("Αλγόριθμος MIN:")
                min_limit = 2
                max_limit = len(self.letters) + 1
                step = 1
            elif n == 2:
                print("Αλγόριθμος MAX:")
                min_limit = len(self.letters)
                max_limit = 1
                step = -1
            elif n == 3:
                print("Αλγόριθμος SMART:")
                min_limit = 2
                max_limit = len(self.letters) + 1
                step = 1

            return func(self, words, n, [min_limit,max_limit,step])

          return wrapper

    @play_decorator
    def play(self, words, n, limits_and_values):
      word = ''
      word_found = False
      if n==3:
        max_score = 0

      if n==1 or n==2 or n==3:
        for word_length in range(limits_and_values[0], limits_and_values[1], limits_and_values[2]):
          permutations = it.permutations(self.letters, word_length)
          list_of_permutations = [''.join(letters) for letters in permutations]
          for possible_word in list_of_permutations:
              if words.get(possible_word, 'Αυτή η λέξη δεν υπάρχει!') != 'Αυτή η λέξη δεν υπάρχει!':
                    if n == 1 or n == 2:
                        word_found = True
                        word = possible_word
                        break
                    elif n == 3:
                        current_score = words.get(possible_word, 0)
                        if current_score > max_score:
                            max_score = current_score
                            word = possible_word
          if word_found:
              break

      return word

    @Player.score_decorator
    def show_score(self):
        print(self.score)

    @Player.final_score_decorator
    def show_final_score(self):
        print(self.score)

    def __repr__(self):
      return f'Class: {self.__class__},'\
             f'name: {self.name},'\
             f'score: {self.score},'\
             f'letters: {self.letters}'

import json

class Game:
    def __init__(self, mode = 3, moves = 0):
        self.sak = SakClass()
        self.words = {}
        self.mode = mode
        self.human = Human()
        self.computer = Computer()
        self.moves = moves
        self.setup()

    def setup(self):
      with open('greek7.txt', 'r', encoding='utf-8') as f7:
        for line in f7:
          word = line.strip('\n')
          score = 0
          for letter in word:
            score = score + self.sak.lets[letter][1]
          self.words[word] = score

      self.print_menu()

      while True:
        i = input('Πληκτρολογίστε χαρακτήρα: ')

        if i == '1':
          print(20 * '-')
          print("1: Score")
          print(20 * '-')
          try:
            with open('scores_file.json', 'r') as sf:
              score_file = json.load(sf)
          except FileNotFoundError:
            print('Αδυναμία εύρεσης αρχείου.')
          else:
            for dict_json in score_file:
              for key, value in dict_json.items():
                print(key, value)
          print(20 * '-')

          self.print_menu()

        elif i == "2":
          print(20 * '-')
          print("2: Ρυθμίσεις")
          print(20 * '-')

          print('Διαθέσιμοι τρόποι παιχνιδιού:')
          print('1: MIN   (Ο υπολογιστής παίζει τη μικρότερη & πρώτη αποδεκτή λέξη που βρίσκει)')
          print('2: MAX   (Ο υπολογιστής παίζει τη μεγαλύτερη αποδεκτή λέξη που βρίσκει)')
          print('3: SMART (Ο υπολογιστής παίζει τη λέξη με το μεγαλύτερο σκορ)')

          while True:
              i2 = input('Πληκτρολογίστε αριθμό: ')

              if i2 == '1':
                  print('Έναρξη παιχνιδιού με παίκτη-υπολογιστή MIN.')
                  self.mode = 1
                  self.computer.name = 'MIN ' + self.computer.name
                  break
              elif i2 == '2':
                  print('Έναρξη παιχνιδιού με παίκτη-υπολογιστή MAX.')
                  self.mode = 2
                  self.computer.name = 'MAX ' + self.computer.name
                  break
              elif i2 == '3':
                  print('Έναρξη παιχνιδιού με παίκτη-υπολογιστή SMART.')
                  self.mode = 3
                  self.computer.name = 'SMART ' + self.computer.name
                  break
              else:
                  print('Παρακαλώ πληκτρολόγησε έναν από τους διαθέσιμους τρόπους παιχνιδιού.')

          self.print_menu()

        elif i == "3":
          print(20 * '-')
          print("3: Παιχνίδι")
          print(20 * '-')
          self.run()
          break

        elif (i == "q") or (i == "Q"):
          print(20 * '-')
          print("q: Έξοδος")
          print('Ευχαριστούμε που έπαιξες μαζί μας!')
          print('Σε περιμένουμε ξανά την επόμενη φορά!')
          print('Τέλος Παιχνιδιού.')
          print(20 * '-')
          break

        else:
          print('Παρακαλώ πληκτρολογίστε έναν από τους διαθέσιμους χαρακτήρες: 1, 2, 3, q')

    def run(self):
      self.human.name = input("Με ποιό όνομα θα παίξεις σε αυτήν την παρτίδα; ")

      self.human.letters = self.sak.getletters(7)
      self.computer.letters = self.sak.getletters(7)

      end_game = False
      while True:
        print(len(self.sak.sak), " γράμματα στο σακουλάκι.")

        while True:
          self.human.show_score()
          self.human.show_letters()
          for letter in self.human.letters:
            print(letter, self.sak.lets[letter][1], sep=':', end=' ')
          played_word = self.human.play()
          number_of_human_letters = len(self.human.letters)
          number_of_letters_in_sak = len(self.sak.sak)

          if played_word == 'q':
            end_game = True
            break

          elif (played_word == 'p') or (played_word == ''):
            self.moves = self.moves + 1

            if number_of_letters_in_sak >= number_of_human_letters and number_of_letters_in_sak > 0 :
              new_letters = self.sak.getletters(number_of_human_letters)
              self.sak.putbackletters(self.human.letters)
              self.human.letters = new_letters
              break
            else:
              print("Δεν μπορείτε να πατήσετε πάσο.")
              print("Δεν υπάρχουν επιπλέον διαθέσιμα γράμματα.")
              print("Το παιχνίδι έλαβε τέλος.")

              q = input("Πληκτρολογίστε το χαρακτήρα 'q' για να λήξει το παιχνίδι: ")
              while q != 'q':
                  q = input("Πληκτρολογίστε το χαρακτήρα 'q' για να λήξει το παιχνίδι: ")
              end_game = True
              break
          else:
            word_found = self.words.get(played_word, "Αυτή η λέξη δεν υπάρχει!")

            if word_found == "Αυτή η λέξη δεν υπάρχει!":
              print("Αυτή η λέξη δεν υπάρχει!")
              print("Δοκίμασε άλλη λέξη ή πήγαινε πάσο αν δεν υπάρχει.")
            else:
              word_score = self.words.get(played_word)
              print("Αποδεκτή Λέξη - Βαθμοί: " + str(word_score) + "- Σκορ: ")
              self.human.increase_score(word_score)
              self.human.show_score()
              self.moves += 1
              number_of_human_letters = number_of_human_letters - len(played_word)
              for letter in played_word:
                self.human.letters.remove(letter)

              if number_of_letters_in_sak >= len(played_word):
                new_letters = self.sak.getletters(len(played_word))
                self.human.letters.extend(new_letters)
                number_of_letters_in_sak = number_of_letters_in_sak - len(played_word)
                number_of_human_letters = len(self.human.letters)
                break
              elif number_of_letters_in_sak > 0 :
                new_letters = self.sak.getletters(number_of_letters_in_sak)
                self.human.letters.extend(new_letters)
                number_of_letters_in_sak = 0
                number_of_human_letters = len(self.human.letters)
                break
              else:
                print("Δεν υπάρχουν επιπλέον διαθέσιμα γράμματα.")
                print("Το παιχνίδι έλαβε τέλος.")
                end_game = True
                break

        played_word = input("Πατήστε enter για συνέχεια.")
        while played_word != '':
          played_word = input("Πατήστε enter για συνέχεια.")
        if end_game == True:
          self.end()
          break
        while True:

          print(len(self.sak.sak), " γράμματα στο σακουλάκι.")
          self.computer.show_score()
          self.computer.show_letters()
          for letter in self.computer.letters:
              print(letter, self.sak.lets[letter][1], sep=':', end=' ')
          print()
          number_of_computer_letters = len(self.computer.letters)
          played_word = self.computer.play(self.words, self.mode)
          if played_word == '' or played_word == None:
            print('Δεν υπάρχει διαθέσιμη λέξη με αυτά τα γράμματα.')
            if number_of_letters_in_sak >= number_of_computer_letters and number_of_letters_in_sak>0 :
              new_letters = self.sak.getletters(number_of_computer_letters)
              self.sak.putbackletters(self.computer.letters)
              self.computer.letters = new_letters
              self.moves += 1
            else:
              print("Δεν υπάρχουν επιπλέον διαθέσιμα γράμματα.")
              print("Το παιχνίδι έλαβε τέλος.")
              end_game = True
              break
          else:
            print('Έπαιξε τη λέξη:', played_word)
            word_score = self.words.get(played_word)
            print("Αποδεκτή Λέξη - Βαθμοί: " + str(word_score) + "- Σκορ: ")
            self.computer.increase_score(word_score)
            self.computer.show_score()
            self.moves += 1
            number_of_computer_letters = number_of_computer_letters - len(played_word)
            for letter in played_word:
              self.computer.letters.remove(letter)
            if number_of_letters_in_sak >= len(played_word):
              new_letters = self.sak.getletters(len(played_word))
              self.computer.letters.extend(new_letters)
              number_of_letters_in_sak = number_of_letters_in_sak - len(played_word)
              number_of_computer_letters = len(self.computer.letters)
              break
            elif number_of_letters_in_sak > 0 :
              new_letters = self.sak.getletters(number_of_letters_in_sak)
              self.computer.letters.extend(new_letters)
              number_of_letters_in_sak = 0
              number_of_computer_letters = len(self.computer.letters)
              break
            else:
              print("Δεν υπάρχουν επιπλέον διαθέσιμα γράμματα.")
              print("Το παιχνίδι έλαβε τέλος.")
              end_game = True
              break

        played_word = input("Πατήστε enter για συνέχεια.")
        while played_word != '':
          played_word = input("Πατήστε enter για συνέχεια.")
        if end_game == True:
          self.end()
          break

    def end(self):
        print("Το παιχνίδι τελείωσε εδώ!")

        if self.computer.score > self.human.score:
            print('Νικητής είναι ο παίκτης:', self.computer.name, ' με score :', self.computer.score)
            print('Το score του παίκτη ', self.human.name, ' είναι: ', self.human.score)
        elif self.human.score > self.computer.score:
            print('Νικητής είναι ο παίκτης:', self.human.name, ' με score :', self.human.score)
            print('Το score του παίκτη ', self.computer.name, ' είναι: ', self.computer.score)
        else:
            print('Ισοπαλία!')
            print('Το score των δύο είναι: ', self.human.score)

        print('Καταγραφή των στατιστικών...')
        new_statistics = {}
        new_statistics['Moves:'] = self.moves
        new_statistics['Name:'] = self.human.name
        new_statistics['Score Human:'] = self.human.score
        new_statistics['Score Computer:'] = self.computer.score
        new_scores = []

        try:
          with open('scores_file.json', 'r') as sf:
              new_scores = json.load(sf)
              new_scores.append(new_statistics)
          with open('scores_file.json', 'w') as sf:
              json.dump(new_scores, sf)
        except FileNotFoundError:
          with open('scores_file.json', 'w') as sf:
            new_scores.append(new_statistics)
            json.dump(new_scores, sf)
        print('Τα στατιστικά της παρτίδας έχουν καταγραφεί στο σύστημα!')

    @staticmethod
    def print_menu():
        print("***** SCRABBLE *****")
        print(20 * '-')
        print("1: Score")
        print("2: Ρυθμίσεις")
        print("3: Παιχνίδι")
        print("q: Έξοδος")
        print(20 * '-')

    def __repr__(self):
        return f'Class: {self.__class__},'\
               f'mode: {self.mode},'\
               f'sak: {self.sak.__class__},'\
               f'human_player: {self.human.__class__},'\
               f'computer_player: {self.computer.__class__},'\
               f'words:{self.words},'\
               f'total_moves: {self.moves}'